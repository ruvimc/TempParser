unit UnitParserClasses;

interface

uses
  System.Classes, System.SysUtils, System.IOUtils,
  Vcl.Dialogs;

type
  TUnitParser = class
  private
    FUnits: TStringList;
    FComponentsGroup: TStringList;
    procedure ParseBlockUses(const ABlock: string;
      var ARowUsesList: TStringList);
    procedure ParseBlockType(const ABlock: string;
      var ARowTypesList: TStringList);
    procedure ParseDirectory(const ADirectory: string; AIsRecursively: Boolean;
      var AUsesList, AProjectUnits: TStringList; var AUnitLinesCount:integer);
    procedure SearchComponents(var AUsesList: TStringList);
  public
    constructor Create;
    destructor Destroy; override;

    procedure RemoveProjectUnits(var AUsesList, AProjectUnits: TStringList);
    procedure ParseFile(const AFilePath: string; var AUsesList: TStringList; var AUnitLinesCount: integer);
    procedure ParseTypes(const AFilePath: string; var ATypesList: TStringList);
    function ParseDirectories(const ADirectory: string;
      AIsRecursively: Boolean): Boolean;
    property Units: TStringList read FUnits;
    property ComponentsGroup: TStringList read FComponentsGroup;
  end;

function UnitParser: TUnitParser;

implementation

var
  FUnitParser: TUnitParser;

function UnitParser: TUnitParser;
begin
  Result := FUnitParser;
end;

{ TUnitParser }

constructor TUnitParser.Create;
begin
  FUnits := TStringList.Create;
  FUnits.Delimiter := ',';
  FUnits.Duplicates := dupIgnore;
  FUnits.Sorted := True;
  FComponentsGroup := TStringList.Create;
end;

destructor TUnitParser.Destroy;
begin
  FComponentsGroup.Free;
  FUnits.Free;
  inherited;
end;

procedure TUnitParser.ParseBlockUses(const ABlock: string;
  var ARowUsesList: TStringList);
var
  TempStr: string;
  p: PChar;
  NewStr: string;
  Removing: Boolean;
  RemovingReasonIndex: Integer;
begin

  RemovingReasonIndex := 0;
  ARowUsesList.Clear;

  Removing := False;
  NewStr := '';
  TempStr := ABlock.Trim;
  if Pos(TempStr, 'uses') = 0 then
    TempStr := TempStr.Substring(4).Trim;
  p := PChar(TempStr);
  while (p^ <> #0) do
  begin
    if (not Removing) and (p^ = '{') then
    begin
      RemovingReasonIndex := 1;
      Removing := True;
    end;
    if (not Removing) and (p^ = ';') then
    begin
      RemovingReasonIndex := 2;
      Removing := True;
    end;
    if (not Removing) and (p^ = '/') and ((p + 1)^ = '/') then
    begin
      RemovingReasonIndex := 3;
      Removing := True;
    end;
    if (not Removing) and (p^ = '(') and ((p + 1)^ = '*') then
    begin
      RemovingReasonIndex := 4;
      Removing := True;
    end;
    if not Removing then
      NewStr := NewStr + p^;
    if (p^ = '}') and (RemovingReasonIndex = 1) then
      Removing := False;
    if (p^ = ';') and (RemovingReasonIndex = 2) then
      Removing := False;
    if ((p^ = #10) or (p^ = #13)) and (RemovingReasonIndex = 3) then
      Removing := False;
    if ((p^ = ')') and ((p - 1)^ = '*')) and (RemovingReasonIndex = 4) then
      Removing := False;
    Inc(p)
  end;

  TempStr := StringReplace(NewStr, ' ', '', [rfReplaceAll]);
  ARowUsesList.DelimitedText := TempStr;
end;

procedure TUnitParser.ParseBlockType(const ABlock: string;
  var ARowTypesList: TStringList);
begin
  // ShowMessage(ABlock);
end;

procedure TUnitParser.ParseFile(const AFilePath: string;
  var AUsesList: TStringList; var AUnitLinesCount:integer);
var
  LRowUsesList: TStringList;
  LFileData: TStringList;
  i: Integer;
  LParsingStarted: Boolean;
  LRow, LBlock: string;
begin
  LParsingStarted := False;
  LBlock := '';
  LRowUsesList := nil;
  LFileData := nil;
  try
    LFileData := TStringList.Create;
    LRowUsesList := TStringList.Create;
    if TFile.Exists(AFilePath) then
    begin
      LFileData.LoadFromFile(AFilePath);
        AUnitLinesCount := LFileData.Count;
      for i := 0 to Pred(LFileData.Count) do
      begin
        if Pos(LFileData[i].ToLower, 'uses') > 0 then
          LParsingStarted := True;
        if LParsingStarted then
        begin
          LBlock := LBlock + LFileData[i] + #10#13;
          if LFileData[i].IndexOf(';') > 0 then
            LParsingStarted := False;
        end;
        if (not LParsingStarted) and (not LBlock.IsEmpty) then
        begin
          ParseBlockUses(LBlock, LRowUsesList);
          LBlock := '';
          for LRow in LRowUsesList do
            // AUsesList.Add(LRow);
            AUsesList.Add(LRow.ToLower);
        end;
      end;
    end;
  finally
    LRowUsesList.Free;
    LFileData.Free
  end;
end;

procedure TUnitParser.ParseTypes(const AFilePath: string;
  var ATypesList: TStringList);
var
  LRowTypesList: TStringList;
  LFileData: TStringList;
  i: Integer;
  LParsingStarted: Boolean;
  LBlock: string;
begin
  LParsingStarted := False;
  LBlock := '';
  LRowTypesList := nil;
  LFileData := nil;
  try
    LFileData := TStringList.Create;
    LRowTypesList := TStringList.Create;
    if TFile.Exists(AFilePath) then
    begin
      LFileData.LoadFromFile(AFilePath);
      for i := 0 to Pred(LFileData.Count) do
      begin
        if Pos(LFileData[i].ToLower, 'type') = 1 then
          LParsingStarted := True;
        if LParsingStarted then
        begin
          LBlock := LBlock + LFileData[i] + #10#13;
          if Pos('implementation', LFileData[i]) > 0 then
            LParsingStarted := False;
        end;
        if (not LParsingStarted) and (not LBlock.IsEmpty) then
        begin
          ParseBlockType(LBlock, LRowTypesList);
          LBlock := '';
          // for LRow in LRowTypesList do
          // AUsesList.Add(LRow);
          // ATypesList.Add(LRow.ToLower);
        end;
      end;
    end;
  finally
    LRowTypesList.Free;
    LFileData.Free
  end;
end;

procedure TUnitParser.ParseDirectory(const ADirectory: string;
  AIsRecursively: Boolean; var AUsesList, AProjectUnits: TStringList; var AUnitLinesCount:integer );
var
  LFiles: TArray<String>;
  LDirectories: TArray<String>;
  LCurrentPath: string;
begin
  if AIsRecursively then
  begin
    LDirectories := TDirectory.GetDirectories(ADirectory);
    for LCurrentPath in LDirectories do
      ParseDirectory(LCurrentPath, AIsRecursively, AUsesList, AProjectUnits);
  end;
  LFiles := TDirectory.GetFiles(ADirectory, '*.pas');
  for LCurrentPath in LFiles do
  begin
    // AProjectUnits.Add(TPath.GetFileNameWithoutExtension(LCurrentPath));
    AProjectUnits.Add(TPath.GetFileNameWithoutExtension(LCurrentPath).ToLower);
    ParseFile(LCurrentPath, AUsesList);
  end;
end;

procedure TUnitParser.RemoveProjectUnits(var AUsesList, AProjectUnits
  : TStringList);
var
  LRow: string;
begin
  for LRow in AProjectUnits do
    if AUsesList.IndexOf(LRow) >= 0 then
      AUsesList.Delete(AUsesList.IndexOf(LRow));
end;

procedure TUnitParser.SearchComponents(var AUsesList: TStringList);
var
  Directory: string;
  LUnits: TStringList;
  LRow: string;
  LFiles: TArray<String>;
  LCurrentPath: string;
begin
  FComponentsGroup.Clear;
  LUnits := TStringList.Create;
  try
    Directory := TPath.Combine(TPath.GetLibraryPath, 'Components');
    LFiles := TDirectory.GetFiles(Directory, '*.txt');
    for LCurrentPath in LFiles do
    begin
      LUnits.LoadFromFile(LCurrentPath);
      for LRow in LUnits do
        if AUsesList.IndexOf(LRow.ToLower) >= 0 then
        begin
          AUsesList.Delete(AUsesList.IndexOf(LRow.ToLower));
          if FComponentsGroup.IndexOf
            (TPath.GetFileNameWithoutExtension(LCurrentPath)) < 0 then
            FComponentsGroup.Add(TPath.GetFileNameWithoutExtension
              (LCurrentPath));
        end;
    end;
  finally
    LUnits.Free;
  end;
end;

function TUnitParser.ParseDirectories(const ADirectory: string;
  AIsRecursively: Boolean): Boolean;
var
  LProjectUnits: TStringList;
begin
  try
    LProjectUnits := TStringList.Create;
    try
      ParseDirectory(ADirectory, AIsRecursively, FUnits, LProjectUnits);
      RemoveProjectUnits(FUnits, LProjectUnits);
      SearchComponents(FUnits);
    finally
      LProjectUnits.Free;
    end;
    Result := True;
  except
    Result := False;
  end;
end;

initialization

FUnitParser := TUnitParser.Create;

finalization

FUnitParser.Free;

end.
